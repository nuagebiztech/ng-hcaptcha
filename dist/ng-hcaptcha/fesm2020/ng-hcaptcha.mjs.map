{"version":3,"file":"ng-hcaptcha.mjs","sources":["../../../projects/ng-hcaptcha/src/lib/ng-hcaptcha-config.ts","../../../projects/ng-hcaptcha/src/lib/hcaptcha-utils.ts","../../../projects/ng-hcaptcha/src/lib/ng-hcaptcha.component.ts","../../../projects/ng-hcaptcha/src/lib/ng-hcaptcha-invisible-button.directive.ts","../../../projects/ng-hcaptcha/src/lib/ng-hcaptcha.service.ts","../../../projects/ng-hcaptcha/src/lib/ng-hcaptcha.module.ts","../../../projects/ng-hcaptcha/src/public_api.ts","../../../projects/ng-hcaptcha/src/ng-hcaptcha.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface CaptchaConfig {\n    /**\n     * The sitekey to use when no sitekey has been\n     * specified on the hcaptcha element.\n     */\n    siteKey?: string;\n    /**\n     * The language code to use instead of the\n     * language automatically detected by hCaptcha.\n     * @see {@link https://docs.hcaptcha.com/languages}\n     */\n    languageCode?: string;\n}\n\nexport const CAPTCHA_CONFIG = new InjectionToken<CaptchaConfig>('CAPTCHA_CONFIG');\n","import {\n  Renderer2,\n  ɵbypassSanitizationTrustUrl,\n  ɵɵtrustConstantResourceUrl,\n} from \"@angular/core\";\nimport { Observable, Subscriber } from \"rxjs\";\n\ndeclare const window: any;\n\n/**\n * Load the hCaptcha script by appending a script element to the head element.\n * The script won't be loaded again if it has already been loaded.\n * Async and defer are set to prevent blocking the renderer while loading hCaptcha.\n */\nexport function loadHCaptcha(\n  languageCode?: string,\n  renderer?: Renderer2\n): Observable<void> {\n  return new Observable<void>((observer: Subscriber<void>) => {\n    // No window object (ssr)\n    if (!window) {\n      return;\n    }\n\n    // The hCaptcha script has already been loaded\n    if (typeof window.hcaptcha !== \"undefined\") {\n      observer.next();\n      observer.complete();\n      return;\n    }\n\n    let src = \"https://hcaptcha.com/1/api.js?render=explicit\";\n\n    // Set language code\n    if (languageCode) {\n      src += `&hl=${languageCode}`;\n    }\n\n    // Setup mock TemplateArray\n    const stringArray = [src] as any;\n    stringArray.raw = [src];\n\n    // Create a trusted URL from your script URL\n    const trustedScriptURL = ɵɵtrustConstantResourceUrl(stringArray);\n\n    // Create a script element\n    const scriptElement = renderer.createElement(\"script\");\n\n    // Set the 'src' attribute of the script element to the trusted URL\n    scriptElement.src = trustedScriptURL;\n    scriptElement.defer = true;\n    scriptElement.async = true;\n    scriptElement.onerror = (e) => observer.error(e);\n    scriptElement.onload = () => {\n      observer.next();\n      observer.complete();\n    };\n\n    // Append the script element to the document head\n    renderer.appendChild(document.head, scriptElement);\n  });\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  OnInit,\n  Inject,\n  NgZone,\n  Output,\n  EventEmitter,\n  forwardRef,\n  PLATFORM_ID,\n  OnDestroy,\n  Renderer2,\n} from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { isPlatformBrowser, isPlatformServer } from \"@angular/common\";\nimport { Subscription } from \"rxjs\";\nimport { CAPTCHA_CONFIG, CaptchaConfig } from \"./ng-hcaptcha-config\";\nimport { loadHCaptcha } from \"./hcaptcha-utils\";\n\ndeclare const window: any;\n\n@Component({\n  selector: \"ng-hcaptcha\",\n  template: '<div #captcha class=\"h-captcha\"></div>',\n  styles: [],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgHcaptchaComponent),\n      multi: true,\n    },\n  ],\n})\nexport class NgHcaptchaComponent\n  implements OnInit, OnDestroy, ControlValueAccessor\n{\n  @Input() siteKey: string;\n  @Input() theme: string;\n  @Input() size: string;\n  @Input() tabIndex: number;\n  @Input() languageCode: string;\n\n  @ViewChild(\"captcha\", { static: true }) captcha: ElementRef;\n\n  @Output() verify: EventEmitter<string> = new EventEmitter<string>();\n  @Output() expired: EventEmitter<any> = new EventEmitter<any>();\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\n\n  private _value: string;\n  private widgetId: string;\n  private captcha$: Subscription;\n\n  onChange: any = () => {};\n  onTouched: any = () => {};\n\n  constructor(\n    @Inject(CAPTCHA_CONFIG) private config: CaptchaConfig,\n    private zone: NgZone,\n    @Inject(PLATFORM_ID) private platformId,\n    private renderer: Renderer2  ) {}\n\n  // Initialization\n\n  ngOnInit() {\n    // Use language code from module config when input parameter is not set\n    if (!this.languageCode) {\n      this.languageCode = this.config.languageCode;\n    }\n\n    // Do not load hCaptcha if platform is server\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n\n    this.captcha$ = loadHCaptcha(this.languageCode,  this.renderer).subscribe(\n      () => {\n        setTimeout(\n          (context) => {\n            // Configure hCaptcha\n            const options = {\n              sitekey: context.siteKey || context.config.siteKey,\n              theme: context.theme,\n              size: context.size,\n              tabindex: context.tabIndex,\n              callback: (res) => {\n                context.zone.run(() => context.onVerify(res));\n              },\n              \"expired-callback\": (res) => {\n                context.zone.run(() => context.onExpired(res));\n              },\n              \"error-callback\": (err) => {\n                context.zone.run(() => context.onError(err));\n              },\n            };\n\n            // Render hCaptcha using the defined options\n            context.widgetId = window.hcaptcha.render(\n              context.captcha.nativeElement,\n              options\n            );\n          },\n          50,\n          this\n        );\n      },\n      (error) => {\n        console.error(\"Failed to load hCaptcha script\", error);\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    this.captcha$.unsubscribe();\n  }\n\n  // ControlValueAccessor implementation\n\n  writeValue(value: string) {\n    // Needs to be implemented to make the FormGroup's reset function work\n    this.value = value;\n\n    // Reset hCaptcha.\n    // We need to check whether window.hcaptcha is defined because\n    // writeValue(value: any) can be called before hCaptcha has been intialized.\n    if (isPlatformBrowser(this.platformId) && !this.value && window.hcaptcha) {\n      window.hcaptcha.reset(this.widgetId);\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  reset() {\n    window.hcaptcha.reset(this.widgetId);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: string) {\n    this._value = value;\n    this.onChange(value);\n    this.onTouched();\n  }\n\n  // Internal functions\n\n  /**\n   * Is called when the verification was successful\n   * @param response The verification token\n   */\n  private onVerify(response: string) {\n    this.value = response;\n    this.verify.emit(response);\n  }\n\n  /**\n   * Is called when the verification has expired\n   * @param response The verification response\n   */\n  private onExpired(response: any) {\n    this.expired.emit(response);\n  }\n\n  /**\n   * Is called when an error occurs during the verification process\n   * @param error The error returned by hCaptcha\n   */\n  private onError(error: any) {\n    this.error.emit(error);\n  }\n}\n","import { Directive, ElementRef, EventEmitter, HostListener, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID, OnDestroy } from '@angular/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { CAPTCHA_CONFIG, CaptchaConfig } from './ng-hcaptcha-config';\nimport { loadHCaptcha } from './hcaptcha-utils';\n\ndeclare const window: any;\n\n@Directive({\n  selector: '[ngHcaptchaInvisibleButton]'\n})\nexport class NgHcaptchaInvisibleButtonDirective implements OnInit, OnDestroy {\n\n  @Input() siteKey: string;\n  @Input() languageCode: string;\n\n  @Output() verify: EventEmitter<string> = new EventEmitter<string>();\n  @Output() expired: EventEmitter<any> = new EventEmitter<any>();\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\n  @Output() click: EventEmitter<any> = new EventEmitter<any>();\n\n  private lastClickEvent: any;\n  private captcha$: Subscription;\n  private widgetId: string;\n\n  constructor(private elRef: ElementRef,\n              @Inject(CAPTCHA_CONFIG) private config: CaptchaConfig,\n              private zone: NgZone,\n              @Inject(PLATFORM_ID) private platformId) { }\n\n  ngOnInit() {\n    // Use language code from module config when input parameter is not set\n    if (!this.languageCode) {\n      this.languageCode = this.config.languageCode;\n    }\n\n    // Do not load hCaptcha if platform is server\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n\n    // Load the hCaptcha script\n    this.captcha$ = loadHCaptcha(this.languageCode).subscribe(\n      () => {\n        setTimeout((context) => {\n          // Configure hCaptcha\n          const options = {\n            sitekey: (context.siteKey || context.config.siteKey),\n            size: 'invisible',\n            callback: (res) => { context.zone.run(() => context.onVerify(res)); },\n            'expired-callback': (res) => { context.zone.run(() => context.onExpired(res)); },\n            'error-callback': (err) => { context.zone.run(() => context.onError(err)); }\n          };\n\n          // Render hCaptcha using the defined options\n          context.widgetId = window.hcaptcha.render(context.elRef.nativeElement, options);\n        }, 50, this);\n      });\n  }\n\n  ngOnDestroy() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n\n    this.captcha$.unsubscribe();\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: any): boolean {\n    if (event.hCaptchaToken) {\n      return;\n    }\n\n    this.lastClickEvent = event;\n    event.stopPropagation();\n    event.preventDefault();\n    event.cancelBubble = true;\n    event.stopImmediatePropagation();\n\n    // Only execute hCaptcha if platform is browser\n    if (isPlatformBrowser(this.platformId)) {\n      window.hcaptcha.execute(this.widgetId);\n    }\n\n    return false;\n  }\n\n  reset() {\n    window.hcaptcha.reset(this.widgetId);\n  }\n\n  /**\n   * Is called when the verification was successful\n   * @param response The verification token\n   */\n  private onVerify(response: string): void {\n    const event = this.lastClickEvent || {};\n    event.hCaptchaToken = response;\n    this.click.emit(event);\n    this.verify.emit(response);\n  }\n\n  /**\n   * Is called when the verification has expired\n   * @param response The verification response\n   */\n  private onExpired(response: any): void {\n    this.expired.emit(response);\n  }\n\n  /**\n   * Is called when an error occurs during the verification process\n   * @param error The error returned by hCaptcha\n   */\n  private onError(error: any): void {\n    this.error.emit(error);\n  }\n\n}\n","import { Inject, Injectable } from \"@angular/core\";\nimport { Observable, Subscriber } from \"rxjs\";\nimport { loadHCaptcha } from \"./hcaptcha-utils\";\nimport { CaptchaConfig, CAPTCHA_CONFIG } from \"./ng-hcaptcha-config\";\n\ndeclare const window: any;\n\n@Injectable()\nexport class NgHcaptchaService {\n\n    private hCaptchaElement: HTMLElement;\n    private hCaptchaWidgetId: string;\n\n    constructor(@Inject(CAPTCHA_CONFIG) private captchaConfig: CaptchaConfig) { }\n\n    verify(): Observable<any> {\n        return new Observable((subscriber: Subscriber<any>) => {\n            loadHCaptcha(this.captchaConfig.languageCode).subscribe(() => {\n                setTimeout((context) => {\n                    // Create hCaptcha element\n                    if (!this.hCaptchaElement) {\n                        this.hCaptchaElement = document.createElement('div');\n                        document.body.appendChild(this.hCaptchaElement);\n                    }\n\n                    // Render hCaptcha using the defined options\n                    if (!this.hCaptchaWidgetId) {\n                        // Configure hCaptcha\n                        const options = {\n                            sitekey: this.captchaConfig.siteKey,\n                            size: 'invisible',\n                            callback: (res) => {\n                                subscriber.next(res);\n                                subscriber.complete();\n                                this.resetHcaptcha();\n                            },\n                            'expired-callback': (res) => {\n                                subscriber.error(res);\n                                this.resetHcaptcha();\n                            },\n                            'error-callback': (err) => {\n                                subscriber.error(err);\n                                this.resetHcaptcha();\n                            },\n                        };\n                        this.hCaptchaWidgetId = window.hcaptcha.render(this.hCaptchaElement, options);\n                    }\n\n                    // Immediately execute hCaptcha\n                    window.hcaptcha.execute(this.hCaptchaWidgetId);\n                }, 50, this);\n            });\n        });\n    }\n\n    private resetHcaptcha() {\n        window.hcaptcha.remove(this.hCaptchaWidgetId);\n        this.hCaptchaElement = null;\n        this.hCaptchaWidgetId = null;\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgHcaptchaComponent } from './ng-hcaptcha.component';\nimport { CAPTCHA_CONFIG, CaptchaConfig } from './ng-hcaptcha-config';\nimport { NgHcaptchaInvisibleButtonDirective } from './ng-hcaptcha-invisible-button.directive';\nimport { NgHcaptchaService } from './ng-hcaptcha.service';\n\n@NgModule({\n  imports: [],\n  declarations: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective],\n  exports: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective],\n})\nexport class NgHcaptchaModule {\n\n  static forRoot(config?: CaptchaConfig): ModuleWithProviders<NgHcaptchaModule> {\n    return {\n      ngModule: NgHcaptchaModule,\n      providers: [\n        NgHcaptchaService,\n        {\n          provide: CAPTCHA_CONFIG,\n          useValue: config || []\n        },\n      ]\n    };\n  }\n\n}\n","/*\n * Public API Surface of ng-hcaptcha\n */\n\nexport * from './lib/ng-hcaptcha-config';\nexport * from './lib/ng-hcaptcha.component';\nexport * from './lib/ng-hcaptcha-invisible-button.directive';\nexport * from './lib/ng-hcaptcha.service';\nexport * from './lib/ng-hcaptcha.module';\nexport * from './lib/hcaptcha-utils';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}